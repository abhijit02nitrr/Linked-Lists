#include<stdio.h>
#include<stdlib.h>
struct node
{

    int data;
    struct node *next;

};
void push(struct node **head_ref,int new_data)
{

    struct node *new_node = (struct node *)malloc (sizeof(struct node));
    if(new_node == NULL)
    {

        printf("No free memory for new node");
        return;
    }

    new_node->data = new_data;
    new_node->next = *head_ref;
    *head_ref = new_node;
    return;

}

void insertAfter(struct node *prev_node,int new_data)
{

    if(prev_node == NULL)
    {

        printf("No previous node");
        return;
    }

    struct node *new_node = (struct node *)malloc(sizeof(struct node));
    if(new_node == NULL)
    {

        printf("No free memory for new node");
        return;
    }

    new_node->data = new_data;
    new_node->next = prev_node->next;
    prev_node->next = new_node;

}

void append(struct node **head_ref,int new_data)
{

    struct node *new_node = (struct node *)malloc(sizeof(struct node));
    struct node *temp = *head_ref;
    if(new_node == NULL)
    {

        printf("No free memory for new node");
        return;
    }
    new_node->data = new_data;
    new_node->next = NULL;

    if(*head_ref == NULL)
    {
        *head_ref = new_node;
        return;
    }
    temp = *head_ref;

    while(temp->next != NULL)
    {
        temp = temp->next;
    }

    temp->next = new_node;
    return;
}
void printlist(struct node *head_ref)
{

    struct node *temp = NULL;
    temp = head_ref;

    while(temp != NULL)
    {

        printf("%d",temp->data);
        temp = temp->next;
    }

}

int main()
{

    struct node *head = NULL;

    append(&head, 6);

    push(&head, 7);

    push(&head, 1);

    append(&head, 4);

    insertAfter(head->next, 8);

    printf("\n Created Linked list is: ");
    printlist(head);

    return;
}
